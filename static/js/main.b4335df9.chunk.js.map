{"version":3,"sources":["reportWebVitals.js","shared/Button/PrintButton.jsx","features/form/components/FormFieldset.jsx","features/form/components/FormLayout.jsx","features/form/components/Inputs.jsx","features/form/screens/Form.jsx","features/navbar/components/ColorThemeButton.jsx","features/navbar/screens/Header.jsx","root/App.jsx","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PrintButton","className","onClick","window","print","icon","faPrint","FormFieldset","title","description","children","FormLayout","TextInput","id","label","name","placeholder","value","htmlFor","autoComplete","pattern","required","type","Form","formSection","field","inputs","row","state","this","map","element","uniqid","Component","ColorThemeButton","themeState","clickHandler","aria-label","faSun","faMoon","root","document","documentElement","detectColorTheme","theme","storedTheme","localStorage","getItem","mediaQuery","matchMedia","setAttribute","matches","Header","isLightTheme","changeTheme","bind","setState","setItem","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b4335df9.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import { faPrint } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport './PrintButton.css';\n\nconst PrintButton = () => {\n    const printPage = () => window.print();\n\n    return (\n        <button className=\"button button--md print\" onClick={printPage}>\n            <FontAwesomeIcon icon={faPrint} />\n            Print page\n        </button>\n    );\n};\n\nexport default PrintButton;\n","import React from 'react';\nimport './FormFieldset.css';\n\nconst FormFieldset = ({ title, description, children }) => {\n    return (\n        <fieldset>\n            <legend className=\"legend\">\n                <h2>{title}</h2>\n                <p>{description}</p>\n            </legend>\n            <div className=\"input-container\">{children}</div>\n        </fieldset>\n    );\n};\n\nexport default FormFieldset;\n","import React from 'react';\nimport './FormLayout.css';\n\nconst FormLayout = ({ children }) => {\n    return (\n        <section className=\"form-container\">\n            <form className=\"form form--round\">{children}</form>\n        </section>\n    );\n};\n\nexport default FormLayout;\n","import React from 'react';\nimport './Inputs.css';\n\nconst TextInput = ({ id, label, name, placeholder, value }) => {\n    return (\n        <div className=\"input\">\n            <label htmlFor={id}>{label}</label>\n            <input\n                autoComplete=\"on\"\n                className=\"\"\n                id={id}\n                name={name} // Used for setting values in state\n                pattern=\"[\\p{L}\\p{M}-]+\" // https://www.regular-expressions.info/unicode.html (unicode categories)\n                placeholder={placeholder}\n                required\n                type=\"text\"\n                value={value} // Value in text\n            />\n        </div>\n    );\n};\n\nconst EmailInput = ({ id, label, name, placeholder, value }) => {\n    return (\n        <div className=\"input\">\n            <label htmlFor={id}>{label}</label>\n            <input\n                autoComplete=\"on\"\n                className=\"\"\n                id={id}\n                name={name}\n                placeholder={placeholder}\n                required\n                type=\"email\"\n                value={value}\n            />\n        </div>\n    );\n};\n\nexport { TextInput, EmailInput };\n","import React, { Component } from 'react';\nimport uniqid from 'uniqid';\nimport PrintButton from '../../../shared/Button/PrintButton';\nimport FormFieldset from '../components/FormFieldset';\nimport FormLayout from '../components/FormLayout';\nimport { TextInput } from '../components/Inputs';\nimport './Form.css';\n\nclass Form extends Component {\n    constructor() {\n        super();\n\n        /*\n                    field                                             inputs ( [ ] = input box)\n            ╭――――――――――――――――――╮           ╭――――――――――――――――――――╮\n            │     title                   │           │                                 │\n            │     description            │           │     ╭―――――――――――――╮   │\n            │                              │           │     │  label1    label2 │  │\n            ╰――――――――――――――――――╯           │     │  [     ]    [     ] │ <-------- Row\n                                                         │     ╰―――――――――――――╯   │\n                                                         │                                 │\n                                                         │      label3                    │\n                                                         │      [                      ]   │\n                                                         ╰――――――――――――――――――――╯\n\n        */\n        this.formSection = [\n            {\n                field: {\n                    title: 'Personal Information',\n                    description:\n                        'Share your contact information so companies know how to reach you.',\n                },\n                inputs: [\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'First Name',\n                                // Stuff that gets passed\n                                id: 'first-name',\n                                name: 'firstName',\n                                placeholder: 'e.g. Biggy',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Last Name',\n                                id: 'last-name',\n                                name: 'lastName',\n                                placeholder: 'e.g. Enterprise',\n                            },\n                        ],\n                    },\n                    {\n                        row: [\n                            {\n                                type: 'email',\n                                label: 'Email address',\n                                id: 'email',\n                                name: 'email',\n                                placeholder: 'e.g. enterprise6@gmail.com',\n                            },\n                            {\n                                type: 'phone',\n                                label: 'Phone Number',\n                                id: 'phone-number',\n                                name: 'phoneNumber',\n                                placeholder: 'e.g. (123) 456-7890',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'text',\n                        label: 'Residence',\n                        id: 'residence',\n                        name: 'residence',\n                        placeholder: 'e.g. Newport News, US',\n                    },\n                ],\n            },\n            {\n                field: {\n                    title: 'Education History',\n                    description:\n                        'Having a degree shows an ability to learn. Althought not required, you may include it if you wish to share.',\n                },\n                inputs: [\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'School Name',\n                                // Stuff that gets passed\n                                id: 'school-name',\n                                name: 'schoolName',\n                                placeholder: 'e.g. Harvard University',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Field of Study',\n                                id: 'field-of-study',\n                                name: 'fieldOfStudy',\n                                placeholder: 'e.g. Computer Science, B.S.',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'text',\n                        label: 'Date',\n                        id: 'date',\n                        name: 'date',\n                        placeholder: 'e.g. 05/12/1938-02/17/1947',\n                    },\n                ],\n            },\n            {\n                field: {\n                    title: 'Work Experience',\n                    description:\n                        'Employers love practical experience. List all relevant work stuff.',\n                },\n                inputs: [\n                    {\n                        type: 'text',\n                        label: 'Date',\n                        id: 'date',\n                        name: 'date',\n                        placeholder: 'e.g. 05/12/1938-02/17/1947',\n                    },\n                ],\n            },\n        ];\n\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <FormLayout>\n                {this.formSection.map((element) => {\n                    return (\n                        <FormFieldset\n                            title={element.field.title}\n                            description={element.field.description}\n                            key={uniqid()}\n                        >\n                            {element.inputs.map((element) => {\n                                if (element.row) {\n                                    return (\n                                        <div className=\"row\" key={uniqid()}>\n                                            {element.row.map((element) => {\n                                                return (\n                                                    <TextInput\n                                                        label={element.label}\n                                                        id={element.id}\n                                                        name={element.id}\n                                                        placeholder={element.placeholder}\n                                                        key={uniqid()}\n                                                    />\n                                                );\n                                            })}\n                                        </div>\n                                    );\n                                }\n\n                                return (\n                                    <TextInput\n                                        label={element.label}\n                                        id={element.id}\n                                        name={element.id}\n                                        placeholder={element.placeholder}\n                                        key={uniqid()}\n                                    />\n                                );\n                            })}\n                        </FormFieldset>\n                    );\n                })}\n                <PrintButton />\n            </FormLayout>\n        );\n    }\n}\n\nexport default Form;\n","import { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\nconst ColorThemeButton = ({ themeState, clickHandler }) => {\n    return (\n        <button\n            aria-label={themeState ? 'Activate dark theme' : 'Activate light theme'}\n            onClick={clickHandler}\n        >\n            <FontAwesomeIcon icon={themeState ? faSun : faMoon} />\n        </button>\n    );\n};\n\nexport default ColorThemeButton;\n","import React, { Component } from 'react';\nimport ColorThemeButton from '../components/ColorThemeButton';\n\nconst root = document.documentElement;\n\nconst detectColorTheme = (() => {\n    // Initial color theme.\n    let theme = 'light';\n    const storedTheme = localStorage.getItem('theme');\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (storedTheme) {\n        root.setAttribute('data-theme', 'light');\n        if (storedTheme === 'dark') {\n            theme = 'dark';\n        }\n    } else if (mediaQuery.matches) {\n        theme = 'dark';\n    }\n\n    if (theme === 'dark') {\n        root.setAttribute('data-theme', 'dark');\n        return false;\n    }\n\n    root.setAttribute('data-theme', 'light');\n    return true;\n})();\n\nclass Header extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isLightTheme: detectColorTheme,\n        };\n\n        this.changeTheme = this.changeTheme.bind(this);\n    }\n\n    changeTheme() {\n        this.setState(\n            {\n                isLightTheme: !this.state.isLightTheme,\n            },\n            () => {\n                const theme = this.state.isLightTheme ? 'light' : 'dark';\n                root.setAttribute('data-theme', theme);\n                localStorage.setItem('theme', theme);\n            }\n        );\n    }\n\n    render() {\n        const { isLightTheme } = this.state;\n\n        return (\n            <header>\n                <ColorThemeButton themeState={isLightTheme} clickHandler={this.changeTheme} />\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import Form from '../features/form/screens/Form';\nimport Header from '../features/navbar/screens/Header';\n\nfunction App() {\n    return (\n        <>\n            <Header />\n            <main>\n                <Form />\n            </main>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './root/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}