{"version":3,"sources":["reportWebVitals.js","shared/Buttons/Buttons.jsx","features/form/components/CustomEditor.jsx","features/form/components/Inputs.jsx","features/form/components/NewInputs.jsx","features/form/components/FormFieldset.jsx","features/form/components/FormLayout.jsx","features/form/screens/Form.jsx","features/navbar/components/ColorThemeButton.jsx","features/navbar/screens/Header.jsx","root/App.jsx","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SubmitButton","className","CustomEditor","props","state","editorHtml","initialValue","theme","handleEditorChange","bind","html","this","onChange","name","setState","value","modules","formats","bounds","id","placeholder","Component","toolbar","list","clipboard","matchVisual","Input","animation","isRequired","label","type","inputProps","pattern","Error","input","uniqid","autoComplete","required","htmlFor","NewInfoButton","onClick","icon","faPlus","NewInputs","isPresent","deleteNewInfo","handleInputChange","window","confirm","event","target","inputs","enableAnimation","includeDelete","map","element","index","isEditor","row","FormFieldset","info","addNewInfo","preventDefault","newInputs","JSON","parse","stringify","forEach","length","toString","newInfo","legend","title","description","isPersonalFieldset","initialInputs","FormLayout","children","onSubmit","Form","formSection","fieldsetData","key","ColorThemeButton","themeState","clickHandler","aria-label","faSun","faMoon","root","document","documentElement","detectColorTheme","storedTheme","localStorage","getItem","mediaQuery","matchMedia","setAttribute","matches","Header","isLightTheme","changeTheme","setItem","App","isSubmitted","submitForm","handleFieldChange","prevState","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7369071a.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import { faDownload, faPrint } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport './Buttons.css';\n\nconst PrintButton = () => {\n    const printPage = () => window.print();\n\n    return (\n        <button className=\"button button--md print\" onClick={printPage}>\n            <FontAwesomeIcon icon={faPrint} />\n            Print page\n        </button>\n    );\n};\n\nconst DownloadButton = ({ onClick }) => {\n    return (\n        <button className=\"button button--md download\" onClick={onClick}>\n            <FontAwesomeIcon icon={faDownload} />\n            Download as PDF\n        </button>\n    );\n};\n\nconst SubmitButton = () => {\n    return <button className=\"button submit\">Submit</button>;\n};\n\nexport { PrintButton, DownloadButton, SubmitButton };\n","import React, { Component } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport './CustomEditor.css';\n\nclass CustomEditor extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editorHtml: this.props.initialValue,\n            theme: 'snow',\n        };\n\n        this.handleEditorChange = this.handleEditorChange.bind(this);\n    }\n\n    handleEditorChange(html) {\n        const { onChange, name } = this.props;\n\n        this.setState(\n            {\n                editorHtml: html,\n            },\n            () => onChange(name, this.state.editorHtml)\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"text-editor\">\n                <ReactQuill\n                    theme={this.state.theme}\n                    onChange={this.handleEditorChange}\n                    value={this.state.editorHtml}\n                    modules={CustomEditor.modules}\n                    formats={CustomEditor.formats}\n                    bounds={'.text-editor'}\n                    id={this.props.id}\n                    placeholder={this.props.placeholder}\n                />\n            </div>\n        );\n    }\n}\n\n/*\n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\nCustomEditor.modules = {\n    toolbar: [['bold', 'italic', 'underline', 'strike'], [{ list: 'bullet' }], ['clean']],\n    clipboard: {\n        // toggle to add extra line breaks when pasting HTML:\n        matchVisual: false,\n    },\n};\n\n/*\n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\nCustomEditor.formats = ['bold', 'italic', 'underline', 'strike', 'list', 'bullet'];\n\nexport default CustomEditor;\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport '../../../shared/Buttons/Buttons.css';\nimport CustomEditor from '../components/CustomEditor';\nimport './Inputs.css';\n\nconst Input = ({\n    animation,\n    initialValue = '',\n    isRequired,\n    label,\n    name,\n    onChange,\n    placeholder,\n    type,\n    value,\n}) => {\n    const inputProps = {};\n\n    switch (type) {\n        case 'text':\n            // Allows all language characters.\n            inputProps.pattern = '^\\\\p{L}*$';\n            inputProps.type = 'text';\n            break;\n        case 'email':\n            inputProps.type = 'email';\n            break;\n        case 'tel':\n            inputProps.type = 'tel';\n            break;\n        // Custom Editor from react-quill\n        case 'editor':\n            break;\n        default:\n            throw new Error('Unknown input type passed to <Input />.');\n    }\n\n    let input = null;\n    const id = uniqid();\n\n    if (type === 'editor') {\n        input = (\n            <CustomEditor\n                id={id}\n                onChange={onChange}\n                initialValue={initialValue}\n                name={name}\n                placeholder={placeholder}\n            />\n        );\n    } else {\n        input = (\n            <input\n                autoComplete=\"on\"\n                id={id}\n                name={name} // Used for setting values in state\n                placeholder={placeholder}\n                required={isRequired}\n                value={value} // Value in text\n                {...inputProps}\n                onChange={onChange}\n            />\n        );\n    }\n\n    return (\n        <div className={`input ${animation}`}>\n            <label htmlFor={id}>{label}</label>\n            {input}\n        </div>\n    );\n};\n\nconst NewInfoButton = ({ onClick }) => {\n    return (\n        <button className=\"button button--md new-info\" onClick={onClick}>\n            <FontAwesomeIcon icon={faPlus} />\n            Add more information\n        </button>\n    );\n};\n\nexport { Input, NewInfoButton };\n","import React, { Component } from 'react';\nimport '../../../shared/Buttons/Buttons.css';\nimport { Input } from '../components/Inputs';\nimport './FormFieldset.css';\n\nclass NewInputs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isPresent: true,\n        };\n\n        this.deleteNewInfo = this.deleteNewInfo.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    deleteNewInfo() {\n        if (window.confirm('Are you sure you want to delete this item?')) {\n            this.setState({\n                isPresent: !this.state.isPresent,\n            });\n        }\n    }\n\n    handleInputChange(event) {\n        const { name, value } = event.target;\n        this.props.onChange(name, value);\n    }\n\n    render() {\n        const { inputs, enableAnimation, includeDelete, onChange } = this.props;\n        const { isPresent } = this.state;\n\n        return (\n            <>\n                {isPresent && (\n                    <div className=\"new-inputs\">\n                        {inputs.map((element, index) => {\n                            // Show animation only when adding new inputs.\n                            const animation = enableAnimation ? `text-anim-${index + 1}` : ``;\n                            const isEditor = element.type === 'editor';\n\n                            if (element.row) {\n                                return (\n                                    <div className={`row ${animation}`}>\n                                        {element.row.map((element) => {\n                                            return (\n                                                <Input\n                                                    {...element}\n                                                    onChange={\n                                                        isEditor ? onChange : this.handleInputChange\n                                                    }\n                                                />\n                                            );\n                                        })}\n                                    </div>\n                                );\n                            }\n\n                            return (\n                                <Input\n                                    animation={animation}\n                                    {...element}\n                                    onChange={isEditor ? onChange : this.handleInputChange}\n                                />\n                            );\n                        })}\n                        {includeDelete && (\n                            <button\n                                className=\"button button--sm delete text-anim-4\"\n                                onClick={this.deleteNewInfo}\n                            >\n                                Delete\n                            </button>\n                        )}\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default NewInputs;\n","import React, { Component } from 'react';\nimport uniqid from 'uniqid';\nimport { NewInfoButton } from '../components/Inputs';\nimport './FormFieldset.css';\nimport NewInputs from './NewInputs';\n\nclass FormFieldset extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            info: [],\n        };\n\n        this.addNewInfo = this.addNewInfo.bind(this);\n    }\n\n    addNewInfo(event) {\n        event.preventDefault();\n\n        /*\n         * Deep clone an array so that newInputs doesn't refer to the same props.inputs from Form.jsx.\n         * The inputs data only contains strings so it's okay in this case.\n         * https://stackoverflow.com/a/122704\n         * https://stackoverflow.com/a/23481096\n         */\n        const newInputs = JSON.parse(JSON.stringify(this.props.inputs));\n\n        // Assign an index to each input's name attribute for differentiation.\n        // Ex. name = 'schoolName0' for a newly added info input\n        newInputs.forEach((element) => {\n            const index = this.state.info.length;\n\n            if (element.row) {\n                element.row.forEach((element) => {\n                    return (element.name = `${element.name}${index.toString()}`);\n                });\n            }\n\n            return (element.name = `${element.name}${index.toString()}`);\n        });\n\n        const inputs = (\n            <NewInputs\n                inputs={newInputs}\n                enableAnimation={true}\n                includeDelete={true}\n                onChange={this.props.onChange}\n                key={uniqid()}\n            />\n        );\n        const newInfo = [...this.state.info, inputs];\n        this.setState({\n            info: newInfo,\n        });\n    }\n\n    render() {\n        const { title, description } = this.props.legend;\n        // Don't show <NewInfoButton /> on 'Personal Information' fieldset since they're is no\n        // reason to add more personal info.\n        const isPersonalFieldset = title === 'Personal Information';\n\n        const initialInputs = (\n            <NewInputs\n                inputs={this.props.inputs}\n                enableAnimation={false}\n                includeDelete={false}\n                onChange={this.props.onChange}\n            />\n        );\n        const { info } = this.state;\n\n        return (\n            <fieldset>\n                <legend className=\"legend\">\n                    <h2>{title}</h2>\n                    <p>{description}</p>\n                </legend>\n                <div className=\"input-container\">\n                    {initialInputs}\n                    {info.length !== 0 && info.map((element) => element)}\n                    {!isPersonalFieldset && <NewInfoButton onClick={this.addNewInfo} />}\n                </div>\n            </fieldset>\n        );\n    }\n}\n\nexport default FormFieldset;\n","import React from 'react';\nimport './FormLayout.css';\n\nconst FormLayout = ({ children, onSubmit }) => {\n    return (\n        <section className=\"form-container\">\n            <form className=\"form form--round\" onSubmit={onSubmit}>\n                {children}\n            </form>\n        </section>\n    );\n};\n\nexport default FormLayout;\n","import React, { Component } from 'react';\nimport { SubmitButton } from '../../../shared/Buttons/Buttons';\nimport FormFieldset from '../components/FormFieldset';\nimport FormLayout from '../components/FormLayout';\nimport './Form.css';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n\n        this.formSection = [\n            {\n                legend: {\n                    title: 'Personal Information',\n                    description:\n                        'Share your contact information so companies know how to reach you.',\n                },\n                inputs: [\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'First Name',\n                                isRequired: true,\n                                name: 'firstName',\n                                placeholder: 'e.g. Biggy',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Last Name',\n                                isRequired: true,\n                                name: 'lastName',\n                                placeholder: 'e.g. Enterprise',\n                            },\n                        ],\n                    },\n                    {\n                        row: [\n                            {\n                                type: 'email',\n                                label: 'Email address',\n                                isRequired: true,\n                                name: 'email',\n                                placeholder: 'e.g. enterprise6@email.com',\n                            },\n                            {\n                                type: 'tel',\n                                label: 'Phone Number',\n                                isRequired: true,\n                                name: 'phoneNumber',\n                                placeholder: 'e.g. (123) 456-7890',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'text',\n                        label: 'Residence',\n                        isRequired: true,\n                        name: 'residence',\n                        placeholder: 'e.g. Newport News, US',\n                    },\n                ],\n            },\n            {\n                legend: {\n                    title: 'Education History',\n                    description:\n                        'Having a degree demonstrates an ability to learn. Although not required, you may include it if you wish to share.',\n                },\n                inputs: [\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'School Name',\n                                isRequired: false,\n                                name: 'schoolName',\n                                placeholder: 'e.g. Harvard University',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Field of Study',\n                                isRequired: false,\n                                name: 'fieldOfStudy',\n                                placeholder: 'e.g. Computer Science, B.S.',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'text',\n                        label: 'Date',\n                        isRequired: false,\n                        name: 'educationDate',\n                        placeholder: 'e.g. 05/12/1938-02/17/1947',\n                    },\n                    {\n                        type: 'editor',\n                        label: 'Details',\n                        initialValue:\n                            '<ul><li><strong>Current GPA</strong>: 4.0</li><li><strong>Projects</strong>: Facebook clone, Battleship</li></ul>',\n                        name: 'educationEditor',\n                        placeholder:\n                            'List all descriptions of important academic achievements in bullet points.',\n                    },\n                ],\n            },\n            {\n                legend: {\n                    title: 'Work Experience',\n                    description:\n                        'Employers love practical experience. Show them what skills you bring to the table.',\n                },\n                inputs: [\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'Company Name',\n                                isRequired: false,\n                                name: 'companyName',\n                                placeholder: 'e.g. US Navy',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Job Title',\n                                isRequired: false,\n                                name: 'jobTitle',\n                                placeholder: 'e.g. Aircraft Carrier',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'text',\n                        label: 'Date',\n                        isRequired: false,\n                        name: 'workDate',\n                        placeholder: 'e.g. 05/12/1938-02/17/1947',\n                    },\n                    {\n                        type: 'editor',\n                        label: 'Details',\n                        initialValue:\n                            '<ul><li>Coordinated movement of air wings at the Battle of Midway.</li></ul>',\n                        name: 'workEditor',\n                        placeholder:\n                            'List all descriptions of applied skills and roles in bullet points.',\n                    },\n                ],\n            },\n        ];\n\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <FormLayout onSubmit={this.props.onSubmit}>\n                {this.formSection.map((fieldsetData, index) => {\n                    return (\n                        <FormFieldset\n                            {...fieldsetData}\n                            onChange={this.props.onChange}\n                            key={index}\n                        />\n                    );\n                })}\n                <SubmitButton />\n            </FormLayout>\n        );\n    }\n}\n\nexport default Form;\n","import { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\nconst ColorThemeButton = ({ themeState, clickHandler }) => {\n    return (\n        <button\n            aria-label={themeState ? 'Activate dark theme' : 'Activate light theme'}\n            onClick={clickHandler}\n        >\n            <FontAwesomeIcon icon={themeState ? faSun : faMoon} />\n        </button>\n    );\n};\n\nexport default ColorThemeButton;\n","import React, { Component } from 'react';\nimport ColorThemeButton from '../components/ColorThemeButton';\n\nconst root = document.documentElement;\n\nconst detectColorTheme = (() => {\n    // Initial color theme.\n    let theme = 'light';\n    const storedTheme = localStorage.getItem('theme');\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (storedTheme) {\n        root.setAttribute('data-theme', 'light');\n        if (storedTheme === 'dark') {\n            theme = 'dark';\n        }\n    } else if (mediaQuery.matches) {\n        theme = 'dark';\n    }\n\n    if (theme === 'dark') {\n        root.setAttribute('data-theme', 'dark');\n        return false;\n    }\n\n    root.setAttribute('data-theme', 'light');\n    return true;\n})();\n\nclass Header extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isLightTheme: detectColorTheme,\n        };\n\n        this.changeTheme = this.changeTheme.bind(this);\n    }\n\n    changeTheme() {\n        this.setState(\n            {\n                isLightTheme: !this.state.isLightTheme,\n            },\n            () => {\n                const theme = this.state.isLightTheme ? 'light' : 'dark';\n                root.setAttribute('data-theme', theme);\n                localStorage.setItem('theme', theme);\n            }\n        );\n    }\n\n    render() {\n        const { isLightTheme } = this.state;\n\n        return (\n            <header>\n                <ColorThemeButton themeState={isLightTheme} clickHandler={this.changeTheme} />\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Form from '../features/form/screens/Form';\nimport Header from '../features/navbar/screens/Header';\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isSubmitted: false,\n        };\n\n        this.submitForm = this.submitForm.bind(this);\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n    }\n\n    submitForm() {\n        this.setState({\n            isSubmitted: !this.state.isSubmitted,\n        });\n    }\n\n    // Callback used in 'handleChange()' in NewInputs.jsx + CustomEditor.jsx\n    handleFieldChange(name, value) {\n        this.setState((prevState) => ({\n            ...prevState,\n            [name]: value,\n        }));\n    }\n\n    render() {\n        const { isSubmitted } = this.state;\n\n        return (\n            <>\n                <Header />\n                <main>\n                    {!isSubmitted && (\n                        <Form onSubmit={this.submitForm} onChange={this.handleFieldChange} />\n                    )}\n                    {isSubmitted && <p>test</p>}\n                </main>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './root/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}