{"version":3,"sources":["reportWebVitals.js","shared/Buttons/Buttons.jsx","features/form/components/CustomEditor.jsx","features/form/components/Inputs.jsx","features/form/components/NewInputs.jsx","features/form/components/FormFieldset.jsx","features/form/components/FormLayout.jsx","features/form/screens/Form.jsx","features/navbar/components/ColorThemeButton.jsx","features/navbar/screens/Header.jsx","features/pdf/components/PersonalInfo.jsx","features/pdf/components/CV.jsx","features/pdf/components/fonts/CormorantGaramond-Bold.ttf","features/pdf/components/fonts/CormorantGaramond-Regular.ttf","features/pdf/components/fonts/DejaVu-Sans.Book.ttf","features/pdf/screens/PDF.jsx","root/App.jsx","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SubmitButton","className","CustomEditor","props","state","editorHtml","value","theme","handleEditorChange","bind","html","this","onChange","name","sectionName","setState","modules","formats","bounds","id","placeholder","Component","toolbar","list","clipboard","matchVisual","Input","animation","index","isRequired","label","type","inputProps","pattern","Error","input","identifier","undefined","autoComplete","required","htmlFor","NewInfoButton","onClick","icon","faPlus","NewInputs","confirmDeletion","handleInputChange","event","preventDefault","window","confirm","removeInputs","target","inputs","enableAnimation","includeDelete","isPresent","map","element","rowStyle","singleStyle","isEditor","row","storedInputs","FormFieldset","info","addNewInfo","updateNewInfoCount","newInputs","JSON","parse","stringify","updateInputCount","length","updatedInfo","filter","component","legend","title","description","isPersonalFieldset","initialInfo","newInfo","indice","start","FormLayout","children","onSubmit","Form","formSection","data","personal","education","work","fieldsetData","key","ColorThemeButton","themeState","clickHandler","aria-label","faSun","faMoon","root","document","documentElement","detectColorTheme","storedTheme","localStorage","getItem","mediaQuery","matchMedia","setAttribute","matches","Header","isLightTheme","changeTheme","setItem","styles","StyleSheet","create","section","alignItems","borderBottom","display","flexDirection","paddingBottom","justifyContent","fontSize","fontWeight","lineHeight","details","specialCharacter","fontFamily","marginLeft","marginRight","PersonalInfo","userInfo","lastName","firstName","email","phoneNumber","residence","blackDiamond","String","fromCharCode","style","page","backgroundColor","padding","width","CV","userData","Font","register","family","format","src","unicodeChar","cormorantBold","cormorantReg","PDF","userName","author","subject","objectHasProperty","object","prop","propertyIsEnumerable","call","App","isSubmitted","schoolName","fieldOfStudy","location","date","editor","companyName","jobTitle","submitForm","handleFieldChange","prevState","personalFirstName","personalLastName","UserPDF","height","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.09e8afbe.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import { faDownload, faPrint } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport './Buttons.css';\n\nconst PrintButton = () => {\n    const printPage = () => window.print();\n\n    return (\n        <button className=\"button button--md print\" onClick={printPage}>\n            <FontAwesomeIcon icon={faPrint} />\n            Print page\n        </button>\n    );\n};\n\nconst DownloadButton = ({ firstName, lastName }) => {\n    return (\n        <button className=\"button button--md download\">\n            <FontAwesomeIcon icon={faDownload} />\n            Download as PDF\n        </button>\n    );\n};\n\nconst SubmitButton = () => {\n    return <button className=\"button submit\">Submit</button>;\n};\n\nexport { PrintButton, DownloadButton, SubmitButton };\n","import React, { Component } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport './CustomEditor.css';\n\nclass CustomEditor extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editorHtml: this.props.value,\n            theme: 'snow',\n        };\n\n        this.handleEditorChange = this.handleEditorChange.bind(this);\n    }\n\n    handleEditorChange(html) {\n        const { onChange, name, sectionName } = this.props;\n\n        this.setState(\n            {\n                editorHtml: html,\n            },\n            () => onChange(sectionName, name, this.state.editorHtml)\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"text-editor\">\n                <ReactQuill\n                    theme={this.state.theme}\n                    onChange={this.handleEditorChange}\n                    value={this.state.editorHtml || ''}\n                    modules={CustomEditor.modules}\n                    formats={CustomEditor.formats}\n                    bounds={'.text-editor'}\n                    id={this.props.id}\n                    placeholder={this.props.placeholder}\n                />\n            </div>\n        );\n    }\n}\n\n/*\n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\nCustomEditor.modules = {\n    toolbar: [['bold', 'italic', 'underline', 'strike'], [{ list: 'bullet' }], ['clean']],\n    clipboard: {\n        // toggle to add extra line breaks when pasting HTML:\n        matchVisual: false,\n    },\n};\n\n/*\n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\nCustomEditor.formats = ['bold', 'italic', 'underline', 'strike', 'list', 'bullet'];\n\nexport default CustomEditor;\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport '../../../shared/Buttons/Buttons.css';\nimport CustomEditor from '../components/CustomEditor';\nimport './Inputs.css';\n\nconst Input = ({\n    animation,\n    index,\n    isRequired,\n    label,\n    name,\n    onChange,\n    placeholder,\n    sectionName,\n    type,\n    value,\n}) => {\n    const inputProps = {};\n\n    switch (type) {\n        case 'text':\n            // Allows all language characters. \\w allows whitespace\n            inputProps.pattern = '^[\\\\p{L} ]*$';\n            inputProps.type = 'text';\n            break;\n        case 'email':\n            inputProps.type = 'email';\n            break;\n        case 'tel':\n            inputProps.type = 'tel';\n            break;\n        // Custom Editor from react-quill\n        case 'editor':\n            break;\n        default:\n            throw new Error('Unknown input type passed to <Input />.');\n    }\n\n    let input = null;\n    let identifier = index !== undefined ? `${name}${index}` : name;\n\n    if (type === 'editor') {\n        input = (\n            <CustomEditor\n                id={identifier}\n                onChange={onChange}\n                value={value[identifier]}\n                name={identifier}\n                placeholder={placeholder}\n                sectionName={sectionName}\n            />\n        );\n    } else {\n        input = (\n            <input\n                autoComplete=\"on\"\n                id={identifier}\n                name={identifier} // Used for setting values in state\n                placeholder={placeholder}\n                required={isRequired}\n                value={value[identifier]} // Value in text\n                {...inputProps}\n                onChange={onChange}\n            />\n        );\n    }\n\n    return (\n        <div className={animation ? `input ${animation}` : 'input'}>\n            <label htmlFor={identifier}>{label}</label>\n            {input}\n        </div>\n    );\n};\n\nconst NewInfoButton = ({ onClick }) => {\n    return (\n        <button className=\"button button--md new-info\" onClick={onClick}>\n            <FontAwesomeIcon icon={faPlus} />\n            Add more information\n        </button>\n    );\n};\n\nexport { Input, NewInfoButton };\n","import React, { Component } from 'react';\nimport '../../../shared/Buttons/Buttons.css';\nimport { Input } from '../components/Inputs';\nimport './FormFieldset.css';\n\nclass NewInputs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.confirmDeletion = this.confirmDeletion.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    confirmDeletion(event) {\n        event.preventDefault();\n\n        if (window.confirm('Are you sure you want to delete this item?')) {\n            const { index } = this.props;\n            this.props.removeInputs(index);\n        }\n    }\n\n    handleInputChange(event) {\n        const { name, value } = event.target;\n        this.props.onChange(this.props.sectionName, name, value);\n    }\n\n    render() {\n        const { inputs, enableAnimation, includeDelete, onChange, isPresent } = this.props;\n\n        return (\n            <>\n                {isPresent && (\n                    <div className=\"new-inputs\">\n                        {inputs.map((element, index) => {\n                            // Show animation only when adding new inputs.\n                            const rowStyle = enableAnimation ? `row text-anim-${index + 1}` : 'row';\n                            const singleStyle = enableAnimation ? `text-anim-${index + 1}` : null;\n                            const isEditor = element.type === 'editor';\n\n                            if (element.row) {\n                                return (\n                                    <div className={rowStyle}>\n                                        {element.row.map((props) => {\n                                            return (\n                                                <Input\n                                                    {...props}\n                                                    value={this.props.storedInputs}\n                                                    index={this.props.index}\n                                                    onChange={\n                                                        isEditor ? onChange : this.handleInputChange\n                                                    }\n                                                />\n                                            );\n                                        })}\n                                    </div>\n                                );\n                            }\n\n                            return (\n                                <Input\n                                    animation={singleStyle}\n                                    value={this.props.storedInputs}\n                                    index={this.props.index}\n                                    // For CustomEditor\n                                    sectionName={this.props.sectionName}\n                                    {...element}\n                                    onChange={isEditor ? onChange : this.handleInputChange}\n                                />\n                            );\n                        })}\n                        {includeDelete && (\n                            <button\n                                className=\"button button--sm delete text-anim-4\"\n                                onClick={this.confirmDeletion}\n                            >\n                                Delete\n                            </button>\n                        )}\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default NewInputs;\n","import React, { Component } from 'react';\nimport { NewInfoButton } from '../components/Inputs';\nimport './FormFieldset.css';\nimport NewInputs from './NewInputs';\n\nclass FormFieldset extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            info: [],\n        };\n\n        this.addNewInfo = this.addNewInfo.bind(this);\n        this.updateNewInfoCount = this.updateNewInfoCount.bind(this);\n    }\n\n    addNewInfo(event) {\n        event.preventDefault();\n\n        /*\n         * Deep clone an array so that newInputs doesn't refer to the same props.inputs from Form.jsx.\n         * The inputs data only contains strings so it's okay in this case.\n         * https://stackoverflow.com/a/122704\n         * https://stackoverflow.com/a/23481096\n         */\n        const newInputs = JSON.parse(JSON.stringify(this.props.inputs));\n        const { sectionName, onChange } = this.props;\n\n        const inputs = {\n            inputs: newInputs,\n            sectionName: sectionName,\n            isPresent: true,\n            removeInputs: this.updateNewInfoCount,\n            enableAnimation: true,\n            includeDelete: true,\n            onChange: onChange,\n        };\n\n        this.props.updateInputCount(sectionName, this.state.info.length);\n\n        this.setState({\n            info: [...this.state.info, inputs],\n        });\n    }\n\n    updateNewInfoCount(index) {\n        const updatedInfo = [...this.state.info];\n        updatedInfo[index].isPresent = !updatedInfo[index].isPresent;\n\n        // TODO: Update in App state by filtering and pass a callback to here.\n        this.setState({\n            info: updatedInfo.filter((component) => component.isPresent),\n        });\n    }\n\n    render() {\n        const { title, description } = this.props.legend;\n        // Don't show <NewInfoButton /> on 'Personal Information' fieldset since they're is no\n        // reason to add more personal info.\n        const isPersonalFieldset = title === 'Personal Information';\n\n        const initialInfo = (\n            <NewInputs\n                inputs={this.props.inputs}\n                // Passed state\n                storedInputs={this.props.storedInputs[0]} // array and use index to access storedInputs\n                sectionName={this.props.sectionName}\n                isPresent={true}\n                enableAnimation={false}\n                includeDelete={false}\n                onChange={this.props.onChange}\n            />\n        );\n\n        const { info } = this.state;\n        let newInfo = null;\n\n        if (info.length !== 0) {\n            newInfo = info.map((props, indice) => {\n                // index is used as an identifier for newly add inputs\n                // storedInputs begin at 1 since initialInfo (name with no identifier) begins at 0\n                const NEW_INFO_START = 1;\n                const start = indice + NEW_INFO_START;\n                return (\n                    <NewInputs\n                        {...props}\n                        // Assign an index to each input's name attribute for differentiation.\n                        // Ex. name = 'schoolName0' for a newly added info input\n                        index={indice}\n                        storedInputs={this.props.storedInputs[start]}\n                    />\n                );\n            });\n        }\n\n        return (\n            <fieldset>\n                <legend className=\"legend\">\n                    <h2>{title}</h2>\n                    <p>{description}</p>\n                </legend>\n                <div className=\"input-container\">\n                    {initialInfo}\n                    {newInfo}\n                    {!isPersonalFieldset && <NewInfoButton onClick={this.addNewInfo} />}\n                </div>\n            </fieldset>\n        );\n    }\n}\n\nexport default FormFieldset;\n","import React from 'react';\nimport './FormLayout.css';\n\nconst FormLayout = ({ children, onSubmit }) => {\n    return (\n        <section className=\"form-container\">\n            <form className=\"form form--round\" onSubmit={onSubmit}>\n                {children}\n            </form>\n        </section>\n    );\n};\n\nexport default FormLayout;\n","import React, { Component } from 'react';\nimport { SubmitButton } from '../../../shared/Buttons/Buttons';\nimport FormFieldset from '../components/FormFieldset';\nimport FormLayout from '../components/FormLayout';\nimport './Form.css';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n\n        this.formSection = [\n            {\n                legend: {\n                    title: 'Personal Information',\n                    description:\n                        'Share your contact information so companies know how to reach you.',\n                },\n                inputs: [\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'First Name',\n                                isRequired: true,\n                                name: 'firstName',\n                                placeholder: 'e.g. Biggy',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Last Name',\n                                isRequired: true,\n                                name: 'lastName',\n                                placeholder: 'e.g. Enterprise',\n                            },\n                        ],\n                    },\n                    {\n                        row: [\n                            {\n                                type: 'email',\n                                label: 'Email address',\n                                isRequired: true,\n                                name: 'email',\n                                placeholder: 'e.g. enterprise6@email.com',\n                            },\n                            {\n                                type: 'tel',\n                                label: 'Phone Number',\n                                isRequired: true,\n                                name: 'phoneNumber',\n                                placeholder: 'e.g. (123) 456-7890',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'text',\n                        label: 'Residence',\n                        isRequired: true,\n                        name: 'residence',\n                        placeholder: 'e.g. Newport News, US',\n                    },\n                ],\n            },\n            {\n                legend: {\n                    title: 'Education History',\n                    description:\n                        'Having a degree demonstrates an ability to learn. Although not required, you may include it if you wish to share.',\n                },\n                inputs: [\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'School Name',\n                                isRequired: false,\n                                name: 'schoolName',\n                                placeholder: 'e.g. Harvard University',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Field of Study',\n                                isRequired: false,\n                                name: 'fieldOfStudy',\n                                placeholder: 'e.g. Computer Science, B.S.',\n                            },\n                        ],\n                    },\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'Location',\n                                isRequired: false,\n                                name: 'location',\n                                placeholder: 'e.g. Oahu, HI',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Date',\n                                isRequired: false,\n                                name: 'date',\n                                placeholder: 'e.g. May 1938 - Feb. 1947',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'editor',\n                        label: 'Details',\n                        name: 'editor',\n                        placeholder:\n                            'List all descriptions of important academic achievements in bullet points.',\n                    },\n                ],\n            },\n            {\n                legend: {\n                    title: 'Work Experience',\n                    description:\n                        'Employers love practical experience. Show them what skills you bring to the table.',\n                },\n                inputs: [\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'Company Name',\n                                isRequired: false,\n                                name: 'companyName',\n                                placeholder: 'e.g. US Navy',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Job Title',\n                                isRequired: false,\n                                name: 'jobTitle',\n                                placeholder: 'e.g. Aircraft Carrier',\n                            },\n                        ],\n                    },\n                    {\n                        row: [\n                            {\n                                type: 'text',\n                                label: 'Location',\n                                isRequired: false,\n                                name: 'location',\n                                placeholder: 'e.g. Oahu, HI',\n                            },\n                            {\n                                type: 'text',\n                                label: 'Date',\n                                isRequired: false,\n                                name: 'date',\n                                placeholder: 'e.g. May 1938 - Feb. 1947',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'editor',\n                        label: 'Details',\n                        name: 'editor',\n                        placeholder:\n                            'List all descriptions of applied skills and roles in bullet points.',\n                    },\n                ],\n            },\n        ];\n    }\n\n    render() {\n        // Passed App state.\n        const { personal, education, work } = this.props.storedInputs;\n        // Arrays with object data\n        const data = [personal, education, work];\n        const sectionName = ['personal', 'education', 'work'];\n\n        return (\n            <FormLayout onSubmit={this.props.onSubmit}>\n                {this.formSection.map((fieldsetData, index) => {\n                    return (\n                        <FormFieldset\n                            {...fieldsetData}\n                            storedInputs={data[index]}\n                            sectionName={sectionName[index]}\n                            onChange={this.props.onChange}\n                            updateInputCount={this.props.updateInputCount}\n                            key={index}\n                        />\n                    );\n                })}\n                <SubmitButton />\n            </FormLayout>\n        );\n    }\n}\n\nexport default Form;\n","import { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\nconst ColorThemeButton = ({ themeState, clickHandler }) => {\n    return (\n        <button\n            aria-label={themeState ? 'Activate dark theme' : 'Activate light theme'}\n            onClick={clickHandler}\n        >\n            <FontAwesomeIcon icon={themeState ? faSun : faMoon} />\n        </button>\n    );\n};\n\nexport default ColorThemeButton;\n","import React, { Component } from 'react';\nimport ColorThemeButton from '../components/ColorThemeButton';\n\nconst root = document.documentElement;\n\nconst detectColorTheme = (() => {\n    // Initial color theme.\n    let theme = 'light';\n    const storedTheme = localStorage.getItem('theme');\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (storedTheme) {\n        root.setAttribute('data-theme', 'light');\n        if (storedTheme === 'dark') {\n            theme = 'dark';\n        }\n    } else if (mediaQuery.matches) {\n        theme = 'dark';\n    }\n\n    if (theme === 'dark') {\n        root.setAttribute('data-theme', 'dark');\n        return false;\n    }\n\n    root.setAttribute('data-theme', 'light');\n    return true;\n})();\n\nclass Header extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isLightTheme: detectColorTheme,\n        };\n\n        this.changeTheme = this.changeTheme.bind(this);\n    }\n\n    changeTheme() {\n        this.setState(\n            {\n                isLightTheme: !this.state.isLightTheme,\n            },\n            () => {\n                const theme = this.state.isLightTheme ? 'light' : 'dark';\n                root.setAttribute('data-theme', theme);\n                localStorage.setItem('theme', theme);\n            }\n        );\n    }\n\n    render() {\n        const { isLightTheme } = this.state;\n\n        return (\n            <header>\n                <ColorThemeButton themeState={isLightTheme} clickHandler={this.changeTheme} />\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import { StyleSheet, Text, View } from '@react-pdf/renderer';\nimport React from 'react';\n\nconst styles = StyleSheet.create({\n    section: {\n        alignItems: 'baseline',\n        borderBottom: '0.1 solid #000000',\n        display: 'flex',\n        flexDirection: 'column',\n        paddingBottom: 4,\n        justifyContent: 'flex-start',\n    },\n    name: {\n        fontSize: 24,\n        fontWeight: 'bold',\n        lineHeight: 1.2,\n    },\n    details: {\n        alignItems: 'baseline',\n        display: 'flex',\n        flexDirection: 'row',\n        fontSize: 16,\n        fontWeight: 'light',\n        justifyContent: 'flex-start',\n    },\n    specialCharacter: {\n        fontFamily: 'DejaVu Sans',\n        marginLeft: 4,\n        marginRight: 4,\n    },\n});\n\nconst PersonalInfo = ({ userInfo }) => {\n    const { lastName, firstName, email, phoneNumber, residence } = userInfo;\n\n    // This unicode character \"❖\".\n    const blackDiamond = String.fromCharCode(0x2756);\n\n    return (\n        <View style={styles.section}>\n            <Text style={styles.name}>{`${firstName} ${lastName}`}</Text>\n            <View style={styles.details}>\n                <Text>{email}</Text>\n                <View style={styles.details}>\n                    <Text style={styles.specialCharacter}>{blackDiamond}</Text>\n                    <Text>{phoneNumber}</Text>\n                    <Text style={styles.specialCharacter}>{blackDiamond}</Text>\n                </View>\n                <Text>{residence}</Text>\n            </View>\n        </View>\n    );\n};\n\nexport default PersonalInfo;\n","import { Page, StyleSheet } from '@react-pdf/renderer';\nimport React from 'react';\nimport PersonalInfo from './PersonalInfo';\n\nconst styles = StyleSheet.create({\n    page: {\n        backgroundColor: '#FFFFFF',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        padding: 36,\n        width: '100%',\n    },\n});\n\nconst CV = ({ userData }) => {\n    return (\n        <Page style={styles.page}>\n            <PersonalInfo userInfo={userData.personal[0]} />\n        </Page>\n    );\n};\n\nexport default CV;\n","export default __webpack_public_path__ + \"static/media/CormorantGaramond-Bold.9f7b94f2.ttf\";","export default __webpack_public_path__ + \"static/media/CormorantGaramond-Regular.e1f2c50e.ttf\";","export default __webpack_public_path__ + \"static/media/DejaVu-Sans.Book.3765b612.ttf\";","import { Document, Font } from '@react-pdf/renderer';\nimport React from 'react';\nimport CV from '../components/CV';\nimport cormorantBold from '../components/fonts/CormorantGaramond-Bold.ttf';\nimport cormorantReg from '../components/fonts/CormorantGaramond-Regular.ttf';\nimport unicodeChar from '../components/fonts/DejaVu-Sans.Book.ttf';\n\n// Just for this character \"❖\"\nFont.register({\n    family: 'DejaVu Sans',\n    format: 'TrueType',\n    src: unicodeChar,\n});\n\nFont.register({\n    family: 'Cormorant Garamond Bold',\n    format: 'TrueType',\n    src: cormorantBold,\n});\n\nFont.register({\n    family: 'Cormorant Garamond Regular',\n    format: 'TrueType',\n    src: cormorantReg,\n});\n\nconst PDF = ({ data }) => {\n    const { firstName, lastName } = data.personal[0];\n    const userName = `${firstName} ${lastName}`;\n\n    return (\n        {\n            /* \n            Basically just following this:\n            https://commonlook.com/the-relevance-of-metadata-in-accessible-pdfs/\n        */\n        },\n        (\n            <Document\n                author={`${userName}`}\n                subject={`Curriculum Vitae for ${userName}`}\n                title={`Curriculum Vitae for ${userName}`}\n            >\n                <CV userData={data} />\n            </Document>\n        )\n    );\n};\n\nexport default PDF;\n","import { PDFViewer } from '@react-pdf/renderer';\nimport React, { Component } from 'react';\nimport Form from '../features/form/screens/Form';\nimport Header from '../features/navbar/screens/Header';\nimport PDF from '../features/pdf/screens/PDF';\n\n// object => object literal\n// prop => string (the property inside the object literal)\n// return boolean\nconst objectHasProperty = (object, prop) => ({}.propertyIsEnumerable.call(object, prop));\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        let storage = null;\n        if (localStorage) {\n            storage = { ...localStorage };\n            // No need to store color theme in App state.\n            delete storage['theme'];\n        }\n\n        this.state = {\n            isSubmitted: false,\n            personal: [\n                {\n                    firstName: '',\n                    lastName: '',\n                    email: '',\n                    phoneNumber: '',\n                    residence: '',\n                },\n            ],\n            education: [\n                {\n                    schoolName: '',\n                    fieldOfStudy: '',\n                    location: '',\n                    date: '',\n                    editor:\n                        '<ul><li><strong>Current GPA</strong>: 4.0</li><li><strong>Projects</strong>: Facebook clone, Battleship</li></ul>',\n                },\n            ],\n            work: [\n                {\n                    companyName: '',\n                    jobTitle: '',\n                    location: '',\n                    date: '',\n                    editor:\n                        '<ul><li>Coordinated movement of air wings at the Battle of Midway.</li></ul>',\n                },\n            ],\n        };\n\n        this.submitForm = this.submitForm.bind(this);\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n        this.updateInputCount = this.updateInputCount.bind(this);\n    }\n\n    updateInputCount(sectionName, index) {\n        switch (sectionName) {\n            case 'education': {\n                const schoolName = `schoolName${index}`;\n                const fieldOfStudy = `fieldOfStudy${index}`;\n                const location = `location${index}`;\n                const date = `date${index}`;\n                const editor = `editor${index}`;\n\n                this.setState((prevState) => ({\n                    ...prevState,\n                    education: [\n                        ...prevState.education,\n                        {\n                            [schoolName]: '',\n                            [fieldOfStudy]: '',\n                            [location]: '',\n                            [date]: '',\n                            [editor]:\n                                '<ul><li><strong>Current GPA</strong>: 4.0</li><li><strong>Projects</strong>: Facebook clone, Battleship</li></ul>',\n                        },\n                    ],\n                }));\n                break;\n            }\n            case 'work': {\n                const companyName = `companyName${index}`;\n                const jobTitle = `jobTitle${index}`;\n                const location = `location${index}`;\n                const date = `date${index}`;\n                const editor = `editor${index}`;\n\n                this.setState((prevState) => ({\n                    ...prevState,\n                    work: [\n                        ...prevState.work,\n                        {\n                            [companyName]: '',\n                            [jobTitle]: '',\n                            [location]: '',\n                            [date]: '',\n                            [editor]:\n                                '<ul><li>Coordinated movement of air wings at the Battle of Midway.</li></ul>',\n                        },\n                    ],\n                }));\n                break;\n            }\n            default:\n                throw new Error(\n                    `Unexpected section name '${sectionName}' was passed.` +\n                        \"Only valid names are 'work' and 'education'.\"\n                );\n        }\n    }\n\n    submitForm() {\n        this.setState({\n            isSubmitted: !this.state.isSubmitted,\n        });\n    }\n\n    // Callback used in 'handleChange()' in NewInputs.jsx + CustomEditor.jsx\n    handleFieldChange(sectionName, name, value) {\n        switch (sectionName) {\n            case 'personal':\n                this.setState(\n                    (prevState) => ({\n                        ...prevState,\n                        personal: [\n                            {\n                                ...prevState.personal[0],\n                                [name]: value,\n                            },\n                        ],\n                    }),\n                    () => {\n                        localStorage.setItem(name, value);\n                    }\n                );\n                break;\n            case 'education':\n                this.setState(\n                    (prevState) => ({\n                        ...prevState,\n                        education: prevState.education.map((state) => {\n                            const matchingName = objectHasProperty(state, name);\n                            return matchingName ? { ...state, [name]: value } : state;\n                        }),\n                    }),\n                    () => {\n                        localStorage.setItem(name, value);\n                    }\n                );\n                break;\n            case 'work':\n                this.setState(\n                    (prevState) => ({\n                        ...prevState,\n                        work: prevState.work.map((state) => {\n                            const matchingName = objectHasProperty(state, name);\n                            return matchingName ? { ...state, [name]: value } : state;\n                        }),\n                    }),\n                    () => {\n                        localStorage.setItem(name, value);\n                    }\n                );\n                break;\n            default:\n                throw new Error(\n                    `Unexpected section name '${sectionName}' was passed.` +\n                        \"Only valid names are 'personal', 'work' and 'education'.\"\n                );\n        }\n    }\n\n    render() {\n        const { isSubmitted, personalFirstName, personalLastName } = this.state;\n        const userName = `${personalFirstName}${personalLastName}CV`;\n\n        let UserPDF = null;\n        if (this.state.isSubmitted) {\n            UserPDF = <PDF data={this.state} />;\n        }\n\n        return (\n            <>\n                <Header />\n                <main>\n                    {!isSubmitted && (\n                        <Form\n                            onSubmit={this.submitForm}\n                            onChange={this.handleFieldChange}\n                            updateInputCount={this.updateInputCount}\n                            storedInputs={this.state}\n                        />\n                    )}\n                    {isSubmitted && (\n                        <>\n                            <PDFViewer width={'80%'} height={'100%'}>\n                                {UserPDF}\n                            </PDFViewer>\n\n                            <button onClick={this.submitForm}>{'< Go back'}</button>\n                        </>\n                    )}\n                </main>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './root/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}